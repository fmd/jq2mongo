package main

import (
        "fmt"
        "log"
        "strconv"
        "gopkg.in/mgo.v2"
        "gopkg.in/mgo.v2/bson"
)

type Word struct {
    Id string `bson:"_id"`
    Value int `bson:"value"`
}

var excludedWords = []string {
"1",
"2",
"a",
"about",
"actual",
"after",
"all",
"already",
"also",
"always",
"am",
"an",
"and",
"another",
"any",
"are",
"aren",
"around",
"as",
"at",
"away",
"back",
"bad",
"be",
"because",
"been",
"before",
"being",
"big",
"bit",
"both",
"but",
"by",
"can",
"care",
"case",
"com",
"come",
"could",
"d",
"day",
"did",
"didn",
"different",
"do",
"does",
"doesn",
"doing",
"don",
"done",
"down",
"edit",
"either",
"else",
"end",
"enough",
"etc",
"even",
"ever",
"every",
"everyone",
"everything",
"far",
"feel",
"few",
"find",
"first",
"for",
"get",
"getting",
"gg",
"give",
"go",
"going",
"good",
"got",
"had",
"hard",
"has",
"hate",
"have",
"having",
"he",
"help",
"her",
"here",
"him",
"his",
"hope",
"how",
"however",
"http",
"https",
"i",
"idea",
"if",
"in",
"into",
"is",
"isn",
"it",
"its",
"keep",
"kind",
"know",
"last",
"least",
"left",
"less",
"let",
"life",
"like",
"link",
"list",
"ll",
"long",
"look",
"lot",
"love",
"m",
"man",
"many",
"matter",
"may",
"maybe",
"me",
"mean",
"means",
"more",
"most",
"much",
"my",
"name",
"need",
"never",
"new",
"news",
"no",
"not",
"nothing",
"now",
"of",
"off",
"oh",
"on",
"one",
"only",
"or",
"other",
"others",
"our",
"out",
"over",
"part",
"people",
"person",
"place",
"play",
"point",
"post",
"pretty",
"put",
"rather",
"read",
"reason",
"reddit",
"right",
"said",
"same",
"say",
"see",
"seem",
"seems",
"seen",
"should",
"show",
"side",
"since",
"site",
"sites",
"so",
"some",
"stuff",
"such",
"sure",
"t",
"take",
"talk",
"tell",
"than",
"that",
"the",
"their",
"them",
"then",
"there",
"these",
"they",
"thing",
"things",
"think",
"this",
"those",
"though",
"thought",
"thread",
"through",
"time",
"to",
"today",
"too",
"true",
"try",
"two",
"understand",
"until",
"up",
"us",
"use",
"used",
"using",
"v",
"ve",
"very",
"video",
"want",
"was",
"wasn",
"watch",
"way",
"we",
"well",
"were",
"what",
"when",
"where",
"which",
"while",
"white",
"who",
"whole",
"why",
"will",
"with",
"won",
"would",
"wouldn",
"wrong",
"www",
"yeah",
"years",
"yes",
"you",
"your",
"s",
"just",
"from",
"make",
"anything",
"r",
"re",
"she",
"game",
"games",
}

func exclude(word string) bool {
    for w := range(excludedWords) {
        if word == excludedWords[w] {
            return true;
        }
    }
    return false;
}

func main() {
        session, err := mgo.Dial("localhost")
        if err != nil {
                panic(err)
        }
        defer session.Close()

        session.SetMode(mgo.Monotonic, true)

        c := session.DB("kotakuinaction").C("words")

        var results []Word

        err = c.Find(bson.M{}).All(&results)
        if err != nil {
                log.Fatal(err)
        }

        for r := range(results) {
            word := results[r].Id
            if (!exclude(word)) {
                fmt.Println(fmt.Sprintf("%s;%s;#16a085;Chrysanthi Regular;",results[r].Id, strconv.Itoa(results[r].Value)))
            }
        }
}